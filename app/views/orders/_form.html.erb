<%= form_for @order do |f| %>
	<div class="row">
		<div class="col-md-6 col-sm-6 col-xs-12" style="margin: 0 auto 20px auto; float: none;">
			<input type="text" id="order_name" name="order[name]" placeholder="Full Name*" required="required">
			<input type="email" id="order_email" name="order[email]" placeholder="Email*" required="required">
			<input type="text" id="order_phone" name="order[phone]" placeholder="Phone*" required="required">
			<input type="text" id="street_number" name="order[street]" placeholder="Street*" required="required">
			<input type="text" id="locality" name="order[city]" placeholder="City*" required="required">
			<input type="text" id="postal_code" name="order[zip_code]" placeholder="Zip*" required="required">
			<div id="payment-form"></div>
			<button class="submit-button" name="commit" type="submit">Place Order</button>	
		</div>	
	</div>
<% end %>

<!--script for google autocomplete-->
<script src="<%="https://maps.googleapis.com/maps/api/js?key=#{ENV['GOOGLE_MAPS_KEY']}&libraries=places&callback=initAutocomplete"%>" async defer></script>
<script>
	var placeSearch, autocomplete;
	var componentForm = {
		street_number: 'short_name',
		route: 'long_name',
		locality: 'long_name',
		postal_code: 'short_name'
	};

	function initAutocomplete() {
		// Create the autocomplete object, restricting the search to geographical
		// location types.
		autocomplete = new google.maps.places.Autocomplete(
			/** @type {!HTMLInputElement} */(document.getElementById('street_number')),
			{types: ['geocode']}
		);
		
		// When the user selects an address from the dropdown, populate the address
		// fields in the form.
		autocomplete.addListener('place_changed', fillInAddress);
	}

	function fillInAddress() {
		// Get the place details from the autocomplete object.
		var place = autocomplete.getPlace();
		
		for (var component in componentForm) {
			console.log('component: ' + component);
			if (component != 'route') {
				document.getElementById(component).value = '';
				document.getElementById(component).disabled = false;
			}
		}
	
		// Get each component of the address from the place details
		// and fill the corresponding field on the form.
		var streetName = '';
	
		for (var i = 0; i < place.address_components.length; i++) {
			var addressType = place.address_components[i].types[0];
			
			console.log('addresstype: ' + addressType);
			if (componentForm[addressType]) {
				
				console.log('componentForm[addressType]: ' + componentForm[addressType]);
				
				if (addressType == 'street_number') {
					streetName += place.address_components[i][componentForm[addressType]] + ' ';
				}
				else if (addressType == 'route') {
					streetName += place.address_components[i][componentForm[addressType]];
				}

				if (addressType != 'street_number' && addressType != 'route') {
					var val = place.address_components[i][componentForm[addressType]];
					document.getElementById(addressType).value = val;
				}
			}
		}

		document.getElementById('street_number').value = streetName;
	}

	// Bias the autocomplete object to the user's geographical location,
	// as supplied by the browser's 'navigator.geolocation' object.
	function geolocate() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function(position) {
				var geolocation = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};
				var circle = new google.maps.Circle({
					center: geolocation,
					radius: position.coords.accuracy
				});
				autocomplete.setBounds(circle.getBounds());
			});
		}
	}
</script>